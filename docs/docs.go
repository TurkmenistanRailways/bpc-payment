// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/check-status": {
            "post": {
                "description": "Check's order status from bank.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epg"
                ],
                "summary": "Check order status. Make this request finally",
                "parameters": [
                    {
                        "description": "check order status request body",
                        "name": "requestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/checkstatus.OrderStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully checked status",
                        "schema": {
                            "$ref": "#/definitions/checkstatus.OrderStatusResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or parameters",
                        "schema": {
                            "$ref": "#/definitions/constants.HttpError"
                        }
                    }
                }
            }
        },
        "/confirm-payment": {
            "post": {
                "description": "Confirm Payment by writing otp code.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epg"
                ],
                "summary": "Confirm Payment Make This Request Third",
                "parameters": [
                    {
                        "description": "Payment Confirmation request body",
                        "name": "requestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/confirpayment.ConfirmPaymentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Just message that says it was succesfully",
                        "schema": {
                            "$ref": "#/definitions/constants.ResponseWithMessage"
                        }
                    },
                    "500": {
                        "description": "Some Confirmation Error",
                        "schema": {
                            "$ref": "#/definitions/constants.HttpError"
                        }
                    }
                }
            }
        },
        "/register-order": {
            "post": {
                "description": "Register an order for payment processing.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epg"
                ],
                "summary": "Order Registration Make this Request First",
                "parameters": [
                    {
                        "description": "Order Registration Request Body",
                        "name": "requestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/orderregistration.OrderRegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful order registration",
                        "schema": {
                            "$ref": "#/definitions/orderregistration.OrderRegistrationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or parameters",
                        "schema": {
                            "$ref": "#/definitions/constants.HttpError"
                        }
                    }
                }
            }
        },
        "/submit-card": {
            "post": {
                "description": "Submit card data to move next into step.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epg"
                ],
                "summary": "Card Submission Make This Request Second",
                "parameters": [
                    {
                        "description": "Card submission request body",
                        "name": "requestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/submitcard.SubmitCardRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Just message that says it was succesfully",
                        "schema": {
                            "$ref": "#/definitions/constants.ResponseWithMessage"
                        }
                    },
                    "400": {
                        "description": "Submit card to bank error",
                        "schema": {
                            "$ref": "#/definitions/constants.HttpError"
                        }
                    },
                    "500": {
                        "description": "Get otp error",
                        "schema": {
                            "$ref": "#/definitions/constants.HttpError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "checkstatus.Attribute": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "checkstatus.CardAuthInfo": {
            "type": "object",
            "properties": {
                "authorizationResponseId": {
                    "type": "string"
                },
                "cardholderName": {
                    "type": "string"
                },
                "expiration": {
                    "type": "string"
                },
                "pan": {
                    "type": "string"
                }
            }
        },
        "checkstatus.MerchantOrderParam": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "checkstatus.OrderStatusRequest": {
            "type": "object",
            "required": [
                "orderId"
            ],
            "properties": {
                "orderId": {
                    "description": "Order id the same as order number",
                    "type": "string"
                },
                "password": {
                    "description": "bank merchant passowrd",
                    "type": "string"
                },
                "userName": {
                    "description": "bank merchant user name",
                    "type": "string"
                }
            }
        },
        "checkstatus.OrderStatusResponse": {
            "type": "object",
            "properties": {
                "actionCode": {
                    "type": "integer"
                },
                "actionCodeDescription": {
                    "type": "string"
                },
                "amount": {
                    "type": "number"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/checkstatus.Attribute"
                    }
                },
                "cardAuthInfo": {
                    "$ref": "#/definitions/checkstatus.CardAuthInfo"
                },
                "currency": {
                    "type": "string"
                },
                "date": {
                    "type": "integer"
                },
                "errorCode": {
                    "type": "string"
                },
                "errorMessage": {
                    "type": "string"
                },
                "fraudLevel": {
                    "type": "integer"
                },
                "ip": {
                    "type": "string"
                },
                "merchantOrderParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/checkstatus.MerchantOrderParam"
                    }
                },
                "orderDescription": {
                    "type": "string"
                },
                "orderNumber": {
                    "type": "string"
                },
                "orderStatus": {
                    "type": "integer"
                }
            }
        },
        "confirpayment.ConfirmPaymentRequest": {
            "type": "object",
            "required": [
                "MDORDER",
                "passwordEdit"
            ],
            "properties": {
                "MDORDER": {
                    "description": "md order which was created on order registration",
                    "type": "string"
                },
                "passwordEdit": {
                    "description": "otp password that comes to phone number",
                    "type": "string"
                },
                "request_id": {
                    "description": "Request id comes from previouse request of card submission",
                    "type": "string"
                }
            }
        },
        "constants.HttpError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "constants.ResponseWithMessage": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "orderregistration.OrderRegistrationRequest": {
            "type": "object",
            "required": [
                "amount",
                "description",
                "password",
                "userName"
            ],
            "properties": {
                "amount": {
                    "description": "Order amount in the minor denomination (for example, cents).",
                    "type": "integer"
                },
                "currency": {
                    "description": "Payment currency code in the ISO 4217 format",
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 3
                },
                "description": {
                    "description": "Free form description of the order.",
                    "type": "string",
                    "maxLength": 512
                },
                "language": {
                    "description": "Optional fields\n\n\t\tLanguage code in the ISO 639-1 format.\n\t\tIf unspecified, SmartVista E-commerce Payment Gateway uses\n\t\tthe default language from the merchant settings.\n\n\t\tError messages are returned in this language.",
                    "type": "string",
                    "maxLength": 2,
                    "minLength": 2
                },
                "orderNumber": {
                    "description": "Number (identifier) of the order in the merchant’s online store system.\n\t\tIt is unique for every store in the system and is generated on the order registration.",
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 1
                },
                "password": {
                    "description": "bank merchant password",
                    "type": "string"
                },
                "sessionTimeoutSecs": {
                    "description": "The order lifespan duration can be taken from the following parameters (from the highest priority to the lowest):\n\t\t· sessionTimeoutSecs transferred in a request. It overrides all other order timeout settings.\n\t\t· If the sessionTimeoutSecs parameter is not specified, the value from the merchant’s settings is used.\n\t\tIt is configured by the Alternative session timeout option that must be enabled and\n\t\tthe Session duration additional parameter that must be specified.\n\t\t· If none of the above mentioned settings is specified\n\t\t(neither sessionTimeoutSecs nor merchant’s timeout),\n\t\tthe default value set in Administration \u003e System settings by the default.session.timeout.milliseconds\n\t\tsystem setting is used (the default value is 1200 seconds) .\n\t\tIf the request contains the expirationDate parameter, the sessionTimeoutSecs parameter is ignored.",
                    "type": "integer"
                },
                "userName": {
                    "description": "bank merchant user name",
                    "type": "string"
                }
            }
        },
        "orderregistration.OrderRegistrationResponse": {
            "type": "object",
            "properties": {
                "errorCode": {
                    "description": "Response code",
                    "type": "integer"
                },
                "errorMessage": {
                    "description": "Error message (in requested language, empty on success)",
                    "type": "string"
                },
                "formUrl": {
                    "description": "URL of the payment page (absent on error)",
                    "type": "string"
                },
                "orderId": {
                    "description": "Unique order ID generated by EPG (absent on error)",
                    "type": "string"
                },
                "recurrenceId": {
                    "description": "Identifier for recurring payments (only for recurring payments)",
                    "type": "string"
                }
            }
        },
        "submitcard.SubmitCardRequest": {
            "type": "object",
            "required": [
                "$CVC",
                "$EXPIRY",
                "$PAN",
                "MDORDER",
                "TEXT",
                "language"
            ],
            "properties": {
                "$CVC": {
                    "description": "CVC is secure code on back side of your card",
                    "type": "string"
                },
                "$EXPIRY": {
                    "description": "should be in form like YYYYMM example 202709",
                    "type": "string"
                },
                "$PAN": {
                    "description": "PAN is a number on card 12 digit code",
                    "type": "string"
                },
                "MDORDER": {
                    "description": "Another meaning of order_id",
                    "type": "string"
                },
                "TEXT": {
                    "description": "Text is card holder name and surname",
                    "type": "string"
                },
                "language": {
                    "description": "language is language",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
